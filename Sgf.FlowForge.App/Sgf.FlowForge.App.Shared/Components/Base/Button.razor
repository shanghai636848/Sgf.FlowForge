@using Sgf.FlowForge.App.Shared.Models
@using Sgf.FlowForge.App.Shared.Services
@* Components/Base/Button.razor *@
@inject LocalizationService L

<button type="@Type"
        class="@GetButtonClasses()"
        disabled="@(Disabled || Loading)"
        @onclick="HandleClick"
        @attributes="AdditionalAttributes">

    @if (Loading)
    {
        <span class="inline-block w-3 h-3 border-2 border-current border-t-transparent rounded-full animate-spin mr-1.5"></span>
        <span>@L["component.button.loading"]</span>
    }
    else
    {
        @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Left)
        {
            <i class="@Icon mr-1.5"></i>
        }

        @if (ChildContent != null)
        {
            @ChildContent
        }
        else
        {
            @Text
        }

        @if (!string.IsNullOrEmpty(Icon) && IconPosition == IconPosition.Right)
        {
            <i class="@Icon ml-1.5"></i>
        }
    }
</button>

@code {
    [Parameter] public string? Text { get; set; }
    [Parameter] public RenderFragment? ChildContent { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public IconPosition IconPosition { get; set; } = IconPosition.Left;
    [Parameter] public ButtonVariant Variant { get; set; } = ButtonVariant.Primary;
    [Parameter] public ButtonSize Size { get; set; } = ButtonSize.Medium;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Loading { get; set; }
    [Parameter] public bool Block { get; set; }
    [Parameter] public string Type { get; set; } = "button";
    [Parameter] public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleClick(MouseEventArgs e)
    {
        if (!Disabled && !Loading)
        {
            await OnClick.InvokeAsync(e);
        }
    }

    private string GetButtonClasses()
    {
        var classes = new List<string>
        {
            "inline-flex items-center justify-center",
            "font-medium transition-all duration-200",
            "focus:outline-none focus:ring-2 focus:ring-offset-2",
            "disabled:opacity-50 disabled:cursor-not-allowed"
        };

        // 尺寸
        classes.Add(Size switch
        {
            ButtonSize.Small => "h-6 px-2 text-[0.625rem] rounded-md gap-1",
            ButtonSize.Medium => "h-7 px-2.5 text-xs rounded-md gap-1.5",
            ButtonSize.Large => "h-8 px-3 text-xs rounded-md gap-1.5",
            _ => "h-7 px-2.5 text-xs rounded-md gap-1.5"
        });

        // 变体样式
        classes.Add(Variant switch
        {
            ButtonVariant.Primary =>
                "bg-gradient-to-r from-[var(--color-primary-500)] to-[var(--color-primary-600)] text-white " +
                "hover:from-[var(--color-primary-600)] hover:to-[var(--color-primary-700)] " +
                "focus:ring-[var(--color-primary-500)] shadow-sm hover:shadow-md active:scale-95",

            ButtonVariant.Secondary =>
                "bg-gradient-to-r from-[var(--color-secondary-500)] to-[var(--color-secondary-600)] text-white " +
                "hover:from-[var(--color-secondary-600)] hover:to-[var(--color-secondary-700)] " +
                "focus:ring-[var(--color-secondary-500)] shadow-sm hover:shadow-md active:scale-95",

            ButtonVariant.Accent =>
                "bg-gradient-to-r from-[var(--color-accent-500)] to-[var(--color-accent-600)] text-white " +
                "hover:from-[var(--color-accent-600)] hover:to-[var(--color-accent-700)] " +
                "focus:ring-[var(--color-accent-500)] shadow-sm hover:shadow-md active:scale-95",

            ButtonVariant.Outline =>
                "border border-[var(--color-border-primary)] bg-transparent " +
                "text-[var(--color-text-primary)] hover:bg-[var(--color-bg-secondary)] " +
                "focus:ring-[var(--color-primary-500)]",

            ButtonVariant.Ghost =>
                "bg-transparent text-[var(--color-text-primary)] " +
                "hover:bg-[var(--color-bg-secondary)] focus:ring-[var(--color-primary-500)]",

            ButtonVariant.Link =>
                "bg-transparent text-[var(--color-primary-500)] underline-offset-4 " +
                "hover:underline focus:ring-0 px-0",

            ButtonVariant.Success =>
                "bg-[var(--color-success-500)] text-white hover:bg-[var(--color-success-600)] " +
                "focus:ring-[var(--color-success-500)] shadow-sm",

            ButtonVariant.Warning =>
                "bg-[var(--color-warning-500)] text-white hover:bg-[var(--color-warning-600)] " +
                "focus:ring-[var(--color-warning-500)] shadow-sm",

            ButtonVariant.Error =>
                "bg-[var(--color-error-500)] text-white hover:bg-[var(--color-error-600)] " +
                "focus:ring-[var(--color-error-500)] shadow-sm",

            _ => "bg-[var(--color-primary-500)] text-white"
        });

        if (Block)
        {
            classes.Add("w-full");
        }

        return string.Join(" ", classes);
    }
}