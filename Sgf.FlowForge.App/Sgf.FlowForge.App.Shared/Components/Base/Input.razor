@using Sgf.FlowForge.App.Shared.Models
@using Sgf.FlowForge.App.Shared.Services
@* Components/Base/Input.razor *@
@inject LocalizationService L

<div class="@GetContainerClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label class="flex items-center gap-1.5 mb-1.5 text-xs font-semibold text-[var(--color-primary-700)]">
            @if (!string.IsNullOrEmpty(LabelIcon))
            {
                <i class="@LabelIcon text-[0.625rem] text-[var(--color-primary-500)]"></i>
            }
            @Label
            @if (Required)
            {
                <span class="text-[var(--color-error-500)]">*</span>
            }
        </label>
    }

    <div class="relative">
        @if (!string.IsNullOrEmpty(PrefixIcon))
        {
            <div class="absolute left-2 top-1/2 -translate-y-1/2 text-[var(--color-text-tertiary)]">
                <i class="@PrefixIcon text-[0.625rem]"></i>
            </div>
        }

        <input type="@Type"
               class="@GetInputClasses()"
               value="@Value"
               placeholder="@(Placeholder ?? L["component.input.placeholder"])"
               disabled="@Disabled"
               readonly="@Readonly"
               @oninput="HandleInput"
               @onblur="HandleBlur"
               @onfocus="HandleFocus"
               @attributes="AdditionalAttributes" />

        @if (!string.IsNullOrEmpty(SuffixIcon) || Clearable && !string.IsNullOrEmpty(Value))
        {
            <div class="absolute right-2 top-1/2 -translate-y-1/2 flex items-center gap-1">
                @if (Clearable && !string.IsNullOrEmpty(Value) && !Disabled && !Readonly)
                {
                    <button type="button"
                            class="text-[var(--color-text-tertiary)] hover:text-[var(--color-text-secondary)] transition-colors"
                            @onclick="HandleClear">
                        <i class="fas fa-times-circle text-[0.625rem]"></i>
                    </button>
                }
                @if (!string.IsNullOrEmpty(SuffixIcon))
                {
                    <i class="@SuffixIcon text-[0.625rem] text-[var(--color-text-tertiary)]"></i>
                }
            </div>
        }
    </div>

    @if (!string.IsNullOrEmpty(Error))
    {
        <div class="mt-1 text-[0.625rem] text-[var(--color-error-500)] flex items-center gap-1">
            <i class="fas fa-exclamation-circle"></i>
            <span>@Error</span>
        </div>
    }
    else if (!string.IsNullOrEmpty(Helper))
    {
        <div class="mt-1 text-[0.625rem] text-[var(--color-text-tertiary)]">
            @Helper
        </div>
    }
</div>

@code {
    [Parameter] public string? Label { get; set; }
    [Parameter] public string? LabelIcon { get; set; }
    [Parameter] public string? Value { get; set; }
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public string? Placeholder { get; set; }
    [Parameter] public string? PrefixIcon { get; set; }
    [Parameter] public string? SuffixIcon { get; set; }
    [Parameter] public InputSize Size { get; set; } = InputSize.Medium;
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Readonly { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool Clearable { get; set; }
    [Parameter] public string? Error { get; set; }
    [Parameter] public string? Helper { get; set; }
    [Parameter] public EventCallback OnFocus { get; set; }
    [Parameter] public EventCallback OnBlur { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    private async Task HandleInput(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task HandleClear()
    {
        Value = string.Empty;
        await ValueChanged.InvokeAsync(Value);
    }

    private async Task HandleFocus()
    {
        await OnFocus.InvokeAsync();
    }

    private async Task HandleBlur()
    {
        await OnBlur.InvokeAsync();
    }

    private string GetContainerClasses()
    {
        return "flex flex-col w-full";
    }

    private string GetInputClasses()
    {
        var classes = new List<string>
        {
            "w-full rounded-md border transition-all duration-200",
            "text-xs text-[var(--color-text-primary)]",
            "placeholder:text-[var(--color-text-tertiary)]",
            "focus:outline-none focus:ring-1"
        };

        // 尺寸
        classes.Add(Size switch
        {
            InputSize.Small => "h-6 px-2 py-1",
            InputSize.Medium => "h-7 px-2 py-1.5",
            InputSize.Large => "h-8 px-2.5 py-2",
            _ => "h-7 px-2 py-1.5"
        });

        // 图标padding调整
        if (!string.IsNullOrEmpty(PrefixIcon))
        {
            classes.Add("pl-7");
        }
        if (!string.IsNullOrEmpty(SuffixIcon) || Clearable)
        {
            classes.Add("pr-7");
        }

        // 状态样式
        if (!string.IsNullOrEmpty(Error))
        {
            classes.Add("border-[var(--color-error-500)] focus:border-[var(--color-error-500)] focus:ring-[var(--color-error-100)]");
        }
        else
        {
            classes.Add("border-[var(--color-border-primary)] bg-[var(--color-bg-base)]");
            classes.Add("hover:border-[var(--color-primary-400)]");
            classes.Add("focus:border-[var(--color-primary-500)] focus:ring-[var(--color-primary-100)]");
        }

        if (Disabled)
        {
            classes.Add("opacity-50 cursor-not-allowed bg-[var(--color-bg-secondary)]");
        }
        else if (Readonly)
        {
            classes.Add("bg-[var(--color-bg-secondary)] cursor-default");
        }

        return string.Join(" ", classes);
    }
}