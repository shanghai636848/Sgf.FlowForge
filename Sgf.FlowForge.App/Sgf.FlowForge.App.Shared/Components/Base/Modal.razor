@inject IJSRuntime JS

@if (Visible)
{
    <div class="fixed inset-0 z-[var(--z-modal)] flex items-center justify-center p-4 animate-fade-in"
         @onclick="HandleOverlayClick">

        <!-- 遮罩层 -->
        <div class="absolute inset-0 bg-[var(--color-overlay)] backdrop-blur-sm"></div>

        <!-- 模态框 -->
        <div class="@GetModalClasses()"
             @onclick:stopPropagation="true">

            <!-- 头部 -->
            @if (!string.IsNullOrEmpty(Title) || HeaderContent != null)
            {
                <div class="flex items-center justify-between px-4 py-3 border-b border-[var(--color-border-secondary)]">
                    <div class="flex items-center gap-2">
                        @if (!string.IsNullOrEmpty(Icon))
                        {
                            <i class="@Icon text-[var(--color-primary-500)]"></i>
                        }
                        @if (!string.IsNullOrEmpty(Title))
                        {
                            <h3 class="text-xs font-semibold text-[var(--color-text-primary)]">@Title</h3>
                        }
                        @if (HeaderContent != null)
                        {
                            @HeaderContent
                        }
                    </div>

                    @if (Closable)
                    {
                        <button type="button"
                                class="text-[var(--color-text-tertiary)] hover:text-[var(--color-text-primary)] transition-colors"
                                @onclick="HandleClose">
                            <i class="fas fa-times text-xs"></i>
                        </button>
                    }
                </div>
            }

            <!-- 内容 -->
            <div class="@GetBodyClasses()">
                @BodyContent
            </div>

            <!-- 底部 -->
            @if (FooterContent != null)
            {
                <div class="flex items-center justify-end gap-2 px-4 py-3 border-t border-[var(--color-border-secondary)] bg-[var(--color-bg-secondary)]">
                    @FooterContent
                </div>
            }
        </div>
    </div>
}

@code {
    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback<bool> VisibleChanged { get; set; }
    [Parameter] public string? Title { get; set; }
    [Parameter] public string? Icon { get; set; }
    [Parameter] public RenderFragment? HeaderContent { get; set; }
    [Parameter] public RenderFragment? BodyContent { get; set; }
    [Parameter] public RenderFragment? FooterContent { get; set; }
    [Parameter] public string Size { get; set; } = "md"; // sm, md, lg, xl, full
    [Parameter] public bool Closable { get; set; } = true;
    [Parameter] public bool CloseOnOverlay { get; set; } = true;
    [Parameter] public EventCallback OnClose { get; set; }
    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object>? AdditionalAttributes { get; set; }

    protected override async Task OnParametersSetAsync()
    {
        if (Visible)
        {
            await JS.InvokeVoidAsync("eval", "document.body.style.overflow = 'hidden'");
        }
        else
        {
            await JS.InvokeVoidAsync("eval", "document.body.style.overflow = ''");
        }
    }

    private async Task HandleClose()
    {
        Visible = false;
        await VisibleChanged.InvokeAsync(false);
        await OnClose.InvokeAsync();
    }

    private async Task HandleOverlayClick()
    {
        if (CloseOnOverlay && Closable)
        {
            await HandleClose();
        }
    }

    private string GetModalClasses()
    {
        var classes = new List<string>
        {
            "relative bg-[var(--color-bg-base)]",
            "rounded-xl shadow-xl",
            "animate-scale-in",
            "max-h-[90vh] flex flex-col"
        };

        // 尺寸
        classes.Add(Size switch
        {
            "sm" => "w-full max-w-sm",
            "md" => "w-full max-w-md",
            "lg" => "w-full max-w-lg",
            "xl" => "w-full max-w-xl",
            "2xl" => "w-full max-w-2xl",
            "full" => "w-full h-full max-w-full max-h-full rounded-none",
            _ => "w-full max-w-md"
        });

        return string.Join(" ", classes);
    }

    private string GetBodyClasses()
    {
        return "p-4 overflow-y-auto flex-1";
    }
}