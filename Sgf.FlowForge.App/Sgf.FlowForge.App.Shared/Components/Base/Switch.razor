<label class="@GetContainerClasses()">
	<div class="relative">
		<input type="checkbox"
			   class="sr-only peer"
			   checked="@Checked"
			   disabled="@Disabled"
			   @onchange="HandleChange"
			   @attributes="AdditionalAttributes" />

		<div class="@GetTrackClasses()">
			<div class="@GetThumbClasses()"></div>
		</div>
	</div>

	@if (!string.IsNullOrEmpty(Label) || ChildContent != null)
	{
		<span class="text-xs text-[var(--color-text-primary)] select-none">
			@if (ChildContent != null)
			{
				@ChildContent
			}
			else
			{
				@Label
			}
		</span>
	}
</label>

@code {
	[Parameter] public bool Checked { get; set; }
	[Parameter] public EventCallback<bool> CheckedChanged { get; set; }
	[Parameter] public string? Label { get; set; }
	[Parameter] public RenderFragment? ChildContent { get; set; }
	[Parameter] public bool Disabled { get; set; }
	[Parameter] public SwitchSize Size { get; set; } = SwitchSize.Medium;
	[Parameter(CaptureUnmatchedValues = true)]
	public Dictionary<string, object>? AdditionalAttributes { get; set; }

	private async Task HandleChange(ChangeEventArgs e)
	{
		if (!Disabled)
		{
			Checked = e.Value is bool value && value;
			await CheckedChanged.InvokeAsync(Checked);
		}
	}

	private string GetContainerClasses()
	{
		var classes = new List<string>
		{
			"inline-flex items-center gap-2"
		};

		if (!Disabled)
		{
			classes.Add("cursor-pointer");
		}
		else
		{
			classes.Add("cursor-not-allowed opacity-50");
		}

		return string.Join(" ", classes);
	}

	private string GetTrackClasses()
	{
		var classes = new List<string>
		{
			"rounded-full transition-all duration-200",
			"peer-focus:ring-2 peer-focus:ring-[var(--color-primary-200)] peer-focus:ring-offset-1"
		};

		// 尺寸
		classes.Add(Size switch
		{
			SwitchSize.Small => "w-8 h-4",
			SwitchSize.Medium => "w-10 h-5",
			SwitchSize.Large => "w-12 h-6",
			_ => "w-10 h-5"
		});

		// 颜色
		if (Disabled)
		{
			classes.Add("bg-[var(--color-gray-300)]");
		}
		else if (Checked)
		{
			classes.Add("bg-[var(--color-primary-500)]");
		}
		else
		{
			classes.Add("bg-[var(--color-gray-300)] hover:bg-[var(--color-gray-400)]");
		}

		return string.Join(" ", classes);
	}

	private string GetThumbClasses()
	{
		var classes = new List<string>
		{
			"bg-white rounded-full shadow-md transition-transform duration-200"
		};

		// 尺寸和位置
		classes.Add(Size switch
		{
			SwitchSize.Small => Checked ? "w-3 h-3 translate-x-[1.125rem]" : "w-3 h-3 translate-x-0.5",
			SwitchSize.Medium => Checked ? "w-4 h-4 translate-x-[1.375rem]" : "w-4 h-4 translate-x-0.5",
			SwitchSize.Large => Checked ? "w-5 h-5 translate-x-[1.625rem]" : "w-5 h-5 translate-x-0.5",
			_ => Checked ? "w-4 h-4 translate-x-[1.375rem]" : "w-4 h-4 translate-x-0.5"
		});

		return string.Join(" ", classes);
	}
	public enum SwitchSize
	{
		Small,
		Medium,
		Large
	}
}

