@* ThemeSwitcher.razor - 主题切换器 *@
@inject IJSRuntime JS

<div class="relative inline-block">
    <button type="button"
            @onclick="ToggleDropdown"
            class="flex items-center gap-1.5 h-7 px-2.5 rounded-md border border-[var(--color-border-primary)] bg-[var(--color-bg-base)] text-xs font-medium text-[var(--color-text-primary)] transition-all hover:bg-[var(--color-bg-secondary)] hover:border-[var(--color-primary-300)] focus:outline-none focus:ring-2 focus:ring-[var(--color-primary-500)] focus:ring-opacity-20">
        <span class="text-sm">@GetThemeIcon()</span>
        @if (ShowLabel)
        {
            <span>@GetThemeLabel()</span>
        }
        <svg class="w-3 h-3 transition-transform @(IsOpen ? "rotate-180" : "")"
             fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 9l-7 7-7-7" />
        </svg>
    </button>

    @if (IsOpen)
    {
        <div class="absolute right-0 mt-1.5 w-40 rounded-lg border border-[var(--color-border-primary)] bg-[var(--color-bg-base)] shadow-lg z-[var(--z-dropdown)] animate-slide-down">
            <div class="py-1.5">
                @foreach (var theme in _themes)
                {
                    <button type="button"
                            @onclick="() => SelectTheme(theme.Value)"
                            class="@GetThemeItemClasses(theme.Value)">
                        <span class="text-sm">@theme.Icon</span>
                        <span class="flex-1 text-left">@theme.Label</span>
                        @if (CurrentTheme == theme.Value)
                        {
                            <svg class="w-3.5 h-3.5 text-[var(--color-primary-500)]"
                                 fill="currentColor" viewBox="0 0 20 20">
                                <path fill-rule="evenodd" d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z" clip-rule="evenodd" />
                            </svg>
                        }
                    </button>
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public bool ShowLabel { get; set; } = true;

    [Parameter]
    public EventCallback<string> OnThemeChanged { get; set; }

    private bool IsOpen { get; set; }
    private string CurrentTheme { get; set; } = "light";

    private record ThemeOption(string Value, string Label, string Icon);

    private readonly List<ThemeOption> _themes = new()
    {
        new("light", "浅色", "☀️"),
        new("dark", "深色", "🌙"),
        new("violet", "紫罗兰", "💜"),
        new("pink", "粉红", "💗"),
        new("auto", "自动", "🔄")
    };

    protected override async Task OnInitializedAsync()
    {
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            // 例如：从 localStorage 读取主题
            CurrentTheme = await JS.InvokeAsync<string>("localStorage.getItem", "theme") ?? "light";            

            // 触发重新渲染（如果需要）
            StateHasChanged();
        }
    }

    private void ToggleDropdown()
    {
        IsOpen = !IsOpen;
    }

    private async Task SelectTheme(string theme)
    {
        CurrentTheme = theme;
        IsOpen = false;

        if (theme == "auto")
        {
            var prefersDark = await JS.InvokeAsync<bool>("matchMedia", "(prefers-color-scheme: dark)");
            theme = prefersDark ? "dark" : "light";
        }

        await JS.InvokeVoidAsync("localStorage.setItem", "theme", theme);
        await JS.InvokeVoidAsync("eval", $"document.documentElement.setAttribute('data-theme', '{theme}')");
        await OnThemeChanged.InvokeAsync(theme);
    }

    private string GetThemeIcon()
    {
        return _themes.FirstOrDefault(t => t.Value == CurrentTheme)?.Icon ?? "☀️";
    }

    private string GetThemeLabel()
    {
        return _themes.FirstOrDefault(t => t.Value == CurrentTheme)?.Label ?? "浅色";
    }

    private string GetThemeItemClasses(string theme)
    {
        var baseClasses = "w-full flex items-center gap-2 px-3 py-1.5 text-xs transition-colors";
        var stateClasses = CurrentTheme == theme
            ? "bg-[var(--color-primary-50)] text-[var(--color-primary-700)] font-medium"
            : "text-[var(--color-text-primary)] hover:bg-[var(--color-bg-secondary)]";

        return $"{baseClasses} {stateClasses}";
    }
}